==========================================================================================

Absolute lengths #
All absolute lengths resolve against the same base, making them predictable wherever they're used in your CSS.
For example, if you use cm to size your element and then print, it should be accurate if you compared it to a ruler.


div {
  width: 10cm;
  height: 5cm;
  background: black;
}
If you printed this page, the div would print as a 10x5cm black rectangle.
Keep in mind, CSS is used not only for digital content, but also to style print content.
Absolute lengths can really come in handy when designing for print.

Unit	Name	                Equivalent to
cm	  Centimeters	          1cm = 96px/2.54
mm	  Millimeters	          1mm = 1/10th of 1cm
Q	    Quarter-millimeters	  1Q = 1/40th of 1cm
in	  Inches	              1in = 2.54cm = 96px
pc	  Picas	                1pc = 1/6th of 1in
pt	  Points	              1pt = 1/72th of 1in
px	  Pixels	               1px = 1/96th of 1in

===========================================================================

Relative lengths #
A relative length is calculated against a base value, much like a percentage.
The difference between these and percentages is that you can contextually size elements.
This means that CSS has units such as ch that use the text size as a basis, and vw which is based on the width of the viewport (your browser window).
Relative lengths are particularly useful on the web due to its responsive nature.

Font-size-relative units #
CSS provides helpful units that are relative to the size of elements of rendered typography, 
such as the size of the text itself (em units) or width of the typefaces characters (ch units).

unit	relative to:
em	  Relative to the font size, i.e. 1.5em will be 50% larger than the base computed font size of its parent. (Historically, the height of the capital letter "M").
ex	  Heuristic to determine whether to use the x-height, a letter "x", or `.5em` in the current computed font size of the element.
cap	  Height of the capital letters in the current computed font size of the element.
ch	  Average character advance of a narrow glyph in the element's font (represented by the "0" glyph).
ic	  Average character advance of a full width glyph in the element's font, as represented by the "æ°´" (CJK water ideograph, U+6C34) glyph.
rem	  Font size of the root element (default is 16px).
lh	  Line height of the element.
rlh	  Line height of the root element.




Viewport-relative units #
You can use the dimensions of the viewport (browser window) as a relative basis. 
These units portion up the available viewport space.

unit	relative to
vw	  1% of viewport's width. People use this unit to do cool font tricks, like resizing a header font based on the width of the page so as the user resizes, the font will also resize.
vh	  1% of viewport's height. You can use this to arrange items in a UI, if you have a footer toolbar for example.
vi	  1% of viewport's size in the root element's inline axis. Axis refers to writing modes. In horizontal writing modes like English, the inline axis is horizontal. In vertical writing modes like some Japanese typefaces, the inline axis runs top to bottom.
vb	  1% of viewport's size in the root element's block axis. For the block axis, this would be the directionality of the language. LTR languages like English would have a vertical block axis, since English language readers parse the page from top to bottom. A vertical writing mode has a horizontal block axis.
vmin	1% of the viewport's smaller dimension.
vmax	1% of the viewport's larger dimension.

div {
  width: 10vw;
}

p {
  max-width: 60ch;
}

=====================================================================================================