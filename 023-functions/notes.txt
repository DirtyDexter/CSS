.post :is(h1, h2, h3) {
	line-height: 1.2;
}

====================================================================================================================================================

:root {
	--base-color: #ff00ff;
}

.my-element {
	background: var(--base-color);
}


====================================================================================================================================================


Functions that return a value #


a::after {
  content: attr(href);
}

.my-element {
	background-image: url('/path/to/image.jpg');
}

====================================================================================================================================================

Color functions #

Some available color functions in CSS are rgb(), rgba(), hsl(), hsla(), hwb(), lab() and lch().
All of these have a similar form where configuration arguments are passed in and a color is returned back.


====================================================================================================================================================

Mathematical expressions #


calc() #

The calc() function takes a single mathematical expression as its parameter.
This mathematical expression can be a mix of types, such as length, number, angle and frequency. Units can be mixed too.


.my-element {
	width: calc(100% - 2rem);
}

:root {
  --root-height: 5rem;
}

.my-element {
  width: calc(calc(10% + 2rem) * 2);
  height: calc(var(--root-height) * 3);
}


min() and max() #

.my-element {
  width: min(20vw, 30rem);
  height: max(20vh, 20rem);
}

clamp() #

The clamp() function takes three arguments: the minimum size, the ideal size and the maximum.


h1 {
  font-size: clamp(2rem, 1rem + 3vw, 3rem);
}

In this example, the font-size will be fluid based on the width of the viewport.
The vw unit is added to a rem unit to assist with screen zooming, because regardless of zoom level a vw unit will be the same size.
Multiplying by a rem unit—based on the root font size— provides the clamp() function with a relative calculation point.


====================================================================================================================================================

Shapes #

The clip-path, offset-path and shape-outside CSS properties use shapes to visually clip your box or provide a shape for content to flow around.

There are shape functions that can be used with both of these properties. Simple shapes such as circle(), ellipse() and inset() take 
configuration arguments to size them. More complex shapes, such as polygon() take comma separated pairs of X and Y axis values to create custom shapes.

.circle {
  clip-path: circle(50%);
}

.polygon {
  clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);
}

Like polygon(), there is also a path() function which takes an SVG fill rule as an argument.
This allows for highly complex shapes that can be drawn in a graphics tool such as Illustrator or Inkscape and then copied into your CSS.

====================================================================================================================================================

Rotation #

You can rotate an element using the rotate() function, which will rotate an element on its center axis.
You can also use the rotateX(), rotateY() and rotateZ() functions to rotate an element on a specific axis instead.
You can pass degree, turn and radian units to determine the level of rotation.

.my-element {
  transform: rotateX(10deg) rotateY(10deg) rotateZ(10deg);
}

The rotate3d() function takes four arguments.

The first 3 arguments are numbers, which define the X, Y and Z coordinates.
The fourth argument is the rotation which, like the other rotation functions, accepts degrees, angle and turns.

.my-element {
  transform: rotate3d(1, 1, 1, 10deg);
}



====================================================================================================================================================
Scale #

You can change the scaling of an element with transform and the scale() function.
The function accepts one or two numbers as a value which determine a positive or negative scaling.
If you only define one number argument, both the X and Y axis will be scaled the same and defining both is a shorthand for X and Y.
Just like rotate(), there are scaleX(), scaleY() and scaleZ() functions to scale an element on a specific axis instead.


.my-element {
  transform: scaleX(1.2) scaleY(1.2);
}

Also like the rotate function, there is a scale3d() function. This is similar to scale(), but it takes three arguments: the X, Y and Z scale factor.


====================================================================================================================================================

Translate #

The translate() functions move an element while it maintains its position in the document flow.
They accept length and percentage values as arguments.
The translate() function translates an element along the X axis if one argument is defined, and 
translates an element along the X and Y axis if both arguments are defined.

.my-element {
  transform: translatex(40px) translatey(25px);
}

You can—just like with other transform functions—use specific functions for a specific axis, using translateX, translateY and translateZ.
You can also use translate3d which allows you to define the X, Y and Z translation in one function.

====================================================================================================================================================

Skewing #

You can skew an element, using the skew() functions which accept angles as arguments.
The skew() function works in a very similar way to translate().
If you only define one argument, it will only affect the X axis and if you define both, it will affect the X and Y axis.
You can also use skewX and skewY to affect each axis independently.

.my-element {
  transform: skew(10deg);
}

====================================================================================================================================================

Perspective #

Lastly, you can use the perspective property —which is part of the transform family of properties—to alter the distance between the user and the Z plane.
This gives the feeling of distance and can be used to create a depth of field in your designs.


More here - https://3dtransforms.desandro.com/


